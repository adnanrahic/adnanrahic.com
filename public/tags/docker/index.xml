<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on @adnanrahic</title>
    <link>https://adnanrahic.com/tags/docker/</link>
    <description>Recent content in Docker on @adnanrahic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Have questions? Shoot me an email, or hit me up on social media! This site was coded with &lt;3 by yours truly.</copyright>
    <lastBuildDate>Thu, 15 Nov 2018 00:03:26 +0200</lastBuildDate>
    
	<atom:link href="https://adnanrahic.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A crash course on optimizing your Docker images for production</title>
      <link>https://adnanrahic.com/post/a-crash-course-on-optimizing-your-docker-images-for-production/</link>
      <pubDate>Thu, 15 Nov 2018 00:03:26 +0200</pubDate>
      
      <guid>https://adnanrahic.com/post/a-crash-course-on-optimizing-your-docker-images-for-production/</guid>
      <description>Don’t you hate it when deploying your app takes ages? Over a gigabyte for a single container image isn’t really what is viewed as best practice. Pushing billions of bytes around every time you deploy a new version doesn’t sound quite right for me.
TL;DR This article will show you a few simple steps of how you can optimize your Docker images, making them smaller, faster and better suited for production.</description>
    </item>
    
  </channel>
</rss>